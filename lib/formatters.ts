// Helper functions to format data from database to frontend format

/**
 * ‡πÅ‡∏õ‡∏•‡∏á‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏õ‡πá‡∏ô format "X‡∏äM. Y‡∏ô‡∏≤‡∏ó‡∏µY"
 */
export function formatDuration(minutes: number): string {
  const hours = Math.floor(minutes / 60);
  const mins = minutes % 60;
  
  if (hours === 0) {
    return `${mins}‡∏ô‡∏≤‡∏ó‡∏µ`;
  }
  if (mins === 0) {
    return `${hours}‡∏ä‡∏°.`;
  }
  return `${hours}‡∏ä‡∏°. ${mins}‡∏ô‡∏≤‡∏ó‡∏µ`;
}

/**
 * ‡πÅ‡∏õ‡∏•‡∏á TIME ‡∏à‡∏≤‡∏Å database ‡πÄ‡∏õ‡πá‡∏ô string "HH:MM"
 */
export function formatTime(timeString: string): string {
  if (!timeString) return '';
  
  // Handle SQL Server TIME format: "HH:MM:SS.SSSSSSS"
  const parts = timeString.split(':');
  if (parts.length >= 2) {
    return `${parts[0].padStart(2, '0')}:${parts[1].padStart(2, '0')}`;
  }
  
  return timeString;
}

/**
 * ‡πÅ‡∏õ‡∏•‡∏á OperatingDays ‡∏à‡∏≤‡∏Å "MON,TUE,WED" ‡πÄ‡∏õ‡πá‡∏ô ['mon', 'tue', 'wed'] ‡∏´‡∏£‡∏∑‡∏≠ ['daily']
 */
export function formatOperatingDays(operatingDays: string | null): string[] {
  if (!operatingDays) return ['daily'];
  
  const days = operatingDays.split(',').map(d => d.trim().toLowerCase());
  
  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô
  const allDays = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'];
  if (days.length === 7 && allDays.every(day => days.includes(day))) {
    return ['daily'];
  }
  
  return days;
}

/**
 * ‡πÅ‡∏õ‡∏•‡∏á JSON string ‡πÄ‡∏õ‡πá‡∏ô array
 */
export function parseJsonArray(jsonString: string | null): string[] {
  if (!jsonString) return [];
  
  try {
    const parsed = JSON.parse(jsonString);
    return Array.isArray(parsed) ? parsed : [];
  } catch {
    return [];
  }
}

/**
 * ‡πÅ‡∏õ‡∏•‡∏á amenities ‡∏à‡∏≤‡∏Å JSON string ‡πÄ‡∏õ‡πá‡∏ô Amenity objects
 */
export function formatAmenities(amenitiesJson: string | null): Array<{
  id: string;
  name: string;
  icon: string;
  available: boolean;
}> {
  const amenityMap: Record<string, { name: string; icon: string }> = {
    wifi: { name: 'Wi-Fi ‡∏ü‡∏£‡∏µ', icon: 'üì∂' },
    ac: { name: '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏®', icon: '‚ùÑÔ∏è' },
    food: { name: '‡∏£‡∏ñ‡πÄ‡∏™‡∏ö‡∏µ‡∏¢‡∏á', icon: 'üçΩÔ∏è' },
    sleeper: { name: '‡∏ó‡∏µ‡πà‡∏ô‡∏≠‡∏ô', icon: 'üõèÔ∏è' },
    power: { name: '‡∏õ‡∏•‡∏±‡πä‡∏Å‡πÑ‡∏ü', icon: 'üîå' },
    accessible: { name: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏û‡∏¥‡∏Å‡∏≤‡∏£', icon: '‚ôø' },
    luggage: { name: '‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤', icon: 'üß≥' },
    toilet: { name: '‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥', icon: 'üöª' },
  };
  
  const amenityIds = parseJsonArray(amenitiesJson);
  
  return amenityIds.map(id => ({
    id,
    name: amenityMap[id]?.name || id,
    icon: amenityMap[id]?.icon || '‚úì',
    available: true,
  }));
}

/**
 * ‡πÅ‡∏õ‡∏•‡∏á class type ‡πÄ‡∏õ‡πá‡∏ô display name
 */
export function formatClassName(classId: string): string {
  const classNames: Record<string, string> = {
    first: '‡∏ä‡∏±‡πâ‡∏ô 1',
    business: '‡∏ä‡∏±‡πâ‡∏ô‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à',
    economy: '‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î',
    '1': '‡∏ä‡∏±‡πâ‡∏ô 1',
    '2': '‡∏ä‡∏±‡πâ‡∏ô 2',
    '3': '‡∏ä‡∏±‡πâ‡∏ô 3',
  };
  
  return classNames[classId] || classId;
}

/**
 * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á (duration) ‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏∂‡∏á
 */
export function calculateDuration(departureTime: string, arrivalTime: string): string {
  try {
    // Parse times
    const [depHour, depMin] = departureTime.split(':').map(Number);
    const [arrHour, arrMin] = arrivalTime.split(':').map(Number);
    
    let totalMinutes = (arrHour * 60 + arrMin) - (depHour * 60 + depMin);
    
    // Handle overnight trains (negative duration means next day)
    if (totalMinutes < 0) {
      totalMinutes += 24 * 60; // Add 24 hours
    }
    
    return formatDuration(totalMinutes);
  } catch {
    return 'N/A';
  }
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á ID ‡∏™‡∏±‡πâ‡∏ô‡∏à‡∏≤‡∏Å GUID
 */
export function shortenId(guid: string): string {
  // ‡πÉ‡∏ä‡πâ 8 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á GUID
  return guid.split('-')[0].toUpperCase();
}

/**
 * Format ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Thai Baht
 */
export function formatPrice(price: number): string {
  return new Intl.NumberFormat('th-TH', {
    style: 'currency',
    currency: 'THB',
    minimumFractionDigits: 0,
    maximumFractionDigits: 0,
  }).format(price);
}

/**
 * Format ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Thai format
 */
export function formatDate(date: Date | string): string {
  const d = typeof date === 'string' ? new Date(date) : date;
  return new Intl.DateTimeFormat('th-TH', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    weekday: 'long',
  }).format(d);
}
